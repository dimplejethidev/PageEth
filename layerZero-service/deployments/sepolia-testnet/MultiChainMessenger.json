{
  "address": "0x9CfFe20fA1041db0de9862F56Af1816aa61Cb4B8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_endpoint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "dstEid",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "limit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "window",
              "type": "uint256"
            }
          ],
          "internalType": "struct RateLimiter.RateLimitConfig[]",
          "name": "_rateLimitConfigs",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidDelegate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidEndpointCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LzTokenUnavailable",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        }
      ],
      "name": "NoPeer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "msgValue",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughNative",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "OnlyEndpoint",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "sender",
          "type": "bytes32"
        }
      ],
      "name": "OnlyPeer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RateLimitExceeded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "srcEid",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "sender",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "data",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        }
      ],
      "name": "MessageReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "dstEid",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "sender",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "data",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        }
      ],
      "name": "MessageSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "peer",
          "type": "bytes32"
        }
      ],
      "name": "PeerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "dstEid",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "limit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "window",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct RateLimiter.RateLimitConfig[]",
          "name": "rateLimitConfigs",
          "type": "tuple[]"
        }
      ],
      "name": "RateLimitsChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SEND_MESSAGE",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "origin",
          "type": "tuple"
        }
      ],
      "name": "allowInitializePath",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endpoint",
      "outputs": [
        {
          "internalType": "contract ILayerZeroEndpointV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dstEid",
          "type": "uint32"
        }
      ],
      "name": "getAmountCanBeSent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "currentAmountInFlight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountCanBeSent",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "isComposeMsgSender",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "_origin",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_guid",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_extraData",
          "type": "bytes"
        }
      ],
      "name": "lzReceive",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "nextNonce",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oAppVersion",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "senderVersion",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "receiverVersion",
          "type": "uint64"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        }
      ],
      "name": "peers",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "peer",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dstEid",
          "type": "uint32"
        },
        {
          "internalType": "string",
          "name": "sender",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "data",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "key",
          "type": "string"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nativeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lzTokenFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct MessagingFee",
          "name": "fee",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "dstEid",
          "type": "uint32"
        }
      ],
      "name": "rateLimits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountInFlight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdated",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "window",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "dstEids",
          "type": "uint32[]"
        },
        {
          "internalType": "string",
          "name": "sender",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "data",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "key",
          "type": "string"
        }
      ],
      "name": "sendMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_delegate",
          "type": "address"
        }
      ],
      "name": "setDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_peer",
          "type": "bytes32"
        }
      ],
      "name": "setPeer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "dstEid",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "limit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "window",
              "type": "uint256"
            }
          ],
          "internalType": "struct RateLimiter.RateLimitConfig[]",
          "name": "_rateLimitConfigs",
          "type": "tuple[]"
        }
      ],
      "name": "setRateLimits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb164d30f0faeed8cb33ae432f1773cf9e2cd16481a1b1a725a5ce4ac3e1a9379",
  "receipt": {
    "to": null,
    "from": "0xF54ab80D517f96d9f5E4Aa4303be13CDE071E8aF",
    "contractAddress": "0x9CfFe20fA1041db0de9862F56Af1816aa61Cb4B8",
    "transactionIndex": 41,
    "gasUsed": "1829331",
    "logsBloom": "0x
    "blockHash": "0xb55b7e658c9d6a223ff37592d60b0aea76a2e0fc64b8751ea32e6580dede6fd8",
    "transactionHash": "0xb164d30f0faeed8cb33ae432f1773cf9e2cd16481a1b1a725a5ce4ac3e1a9379",
    "logs": [
      {
        "transactionIndex": 41,
        "blockNumber": 6707768,
        "transactionHash": "0xb164d30f0faeed8cb33ae432f1773cf9e2cd16481a1b1a725a5ce4ac3e1a9379",
        "address": "0x9CfFe20fA1041db0de9862F56Af1816aa61Cb4B8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f54ab80d517f96d9f5e4aa4303be13cde071e8af"
        ],
        "data": "0x",
        "logIndex": 86,
        "blockHash": "0xb55b7e658c9d6a223ff37592d60b0aea76a2e0fc64b8751ea32e6580dede6fd8"
      },
      {
        "transactionIndex": 41,
        "blockNumber": 6707768,
        "transactionHash": "0xb164d30f0faeed8cb33ae432f1773cf9e2cd16481a1b1a725a5ce4ac3e1a9379",
        "address": "0x6EDCE65403992e310A62460808c4b910D972f10f",
        "topics": [
          "0x6ee10e9ed4d6ce9742703a498707862f4b00f1396a87195eb93267b3d7983981"
        ],
        "data": "0x0000000000000000000000009cffe20fa1041db0de9862f56af1816aa61cb4b8000000000000000000000000f54ab80d517f96d9f5e4aa4303be13cde071e8af",
        "logIndex": 87,
        "blockHash": "0xb55b7e658c9d6a223ff37592d60b0aea76a2e0fc64b8751ea32e6580dede6fd8"
      },
      {
        "transactionIndex": 41,
        "blockNumber": 6707768,
        "transactionHash": "0xb164d30f0faeed8cb33ae432f1773cf9e2cd16481a1b1a725a5ce4ac3e1a9379",
        "address": "0x9CfFe20fA1041db0de9862F56Af1816aa61Cb4B8",
        "topics": [
          "0xe888347665897e637801f36c5129f510657276178c89022bc5fa0246dbc19de1"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000003e80000000000000000000000000000000000000000000000000000000000000e10",
        "logIndex": 88,
        "blockHash": "0xb55b7e658c9d6a223ff37592d60b0aea76a2e0fc64b8751ea32e6580dede6fd8"
      }
    ],
    "blockNumber": 6707768,
    "cumulativeGasUsed": "8442612",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6EDCE65403992e310A62460808c4b910D972f10f",
    "0xF54ab80D517f96d9f5E4Aa4303be13CDE071E8aF",
    [
      {
        "dstEid": 1,
        "limit": 1000,
        "window": 3600
      }
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "376a3202c66c3d7e2f7787eb251c307b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_endpoint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"window\",\"type\":\"uint256\"}],\"internalType\":\"struct RateLimiter.RateLimitConfig[]\",\"name\":\"_rateLimitConfigs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDelegate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEndpointCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LzTokenUnavailable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"NoPeer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"}],\"name\":\"NotEnoughNative\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"OnlyEndpoint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"}],\"name\":\"OnlyPeer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RateLimitExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"sender\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"MessageReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"sender\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"name\":\"PeerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"window\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct RateLimiter.RateLimitConfig[]\",\"name\":\"rateLimitConfigs\",\"type\":\"tuple[]\"}],\"name\":\"RateLimitsChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SEND_MESSAGE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"origin\",\"type\":\"tuple\"}],\"name\":\"allowInitializePath\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpointV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dstEid\",\"type\":\"uint32\"}],\"name\":\"getAmountCanBeSent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentAmountInFlight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCanBeSent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"isComposeMsgSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"_origin\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nextNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oAppVersion\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"senderVersion\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"receiverVersion\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"peers\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dstEid\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"sender\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"quote\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"internalType\":\"struct MessagingFee\",\"name\":\"fee\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"}],\"name\":\"rateLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountInFlight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"window\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"dstEids\",\"type\":\"uint32[]\"},{\"internalType\":\"string\",\"name\":\"sender\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"sendMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"setDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_peer\",\"type\":\"bytes32\"}],\"name\":\"setPeer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"window\",\"type\":\"uint256\"}],\"internalType\":\"struct RateLimiter.RateLimitConfig[]\",\"name\":\"_rateLimitConfigs\",\"type\":\"tuple[]\"}],\"name\":\"setRateLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"RateLimitsChanged((uint32,uint256,uint256)[])\":{\"params\":{\"rateLimitConfigs\":\"An array of `RateLimitConfig` structs representing the rate limit configurations set. - `dstEid`: The destination endpoint id. - `limit`: This represents the maximum allowed amount within a given window. - `window`: Defines the duration of the rate limiting window.\"}}},\"kind\":\"dev\",\"methods\":{\"allowInitializePath((uint32,bytes32,uint64))\":{\"details\":\"This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.This defaults to assuming if a peer has been set, its initialized. Can be overridden by the OApp if there is other logic to determine this.\",\"params\":{\"origin\":\"The origin information containing the source endpoint and sender address.\"},\"returns\":{\"_0\":\"Whether the path has been initialized.\"}},\"getAmountCanBeSent(uint32)\":{\"params\":{\"_dstEid\":\"The destination endpoint id.\"},\"returns\":{\"amountCanBeSent\":\"The amount that can be sent.\",\"currentAmountInFlight\":\"The current amount that was sent.\"}},\"isComposeMsgSender((uint32,bytes32,uint64),bytes,address)\":{\"details\":\"_origin The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message._message The lzReceive payload.Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.The default sender IS the OAppReceiver implementer.\",\"params\":{\"_sender\":\"The sender address.\"},\"returns\":{\"_0\":\"isSender Is a valid sender.\"}},\"lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)\":{\"details\":\"Entry point for receiving messages or packets from the endpoint.Entry point for receiving msg/packet from the LayerZero endpoint.\",\"params\":{\"_executor\":\"The address of the executor for the received message.\",\"_extraData\":\"Additional arbitrary data provided by the corresponding executor.\",\"_guid\":\"The unique identifier for the received LayerZero message.\",\"_message\":\"The payload of the received message.\",\"_origin\":\"The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message.\"}},\"nextNonce(uint32,bytes32)\":{\"details\":\"_srcEid The source endpoint ID._sender The sender address.The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.Is required by the off-chain executor to determine the OApp expects msg execution is ordered.This is also enforced by the OApp.By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.\",\"returns\":{\"nonce\":\"The next nonce.\"}},\"oAppVersion()\":{\"returns\":{\"receiverVersion\":\"The version of the OAppReceiver.sol implementation.\",\"senderVersion\":\"The version of the OAppSender.sol implementation.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setDelegate(address)\":{\"details\":\"Only the owner/admin of the OApp can call this function.Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\",\"params\":{\"_delegate\":\"The address of the delegate to be set.\"}},\"setPeer(uint32,bytes32)\":{\"details\":\"Only the owner/admin of the OApp can call this function.Indicates that the peer is trusted to send LayerZero messages to this OApp.Set this to bytes32(0) to remove the peer address.Peer is a bytes32 to accommodate non-evm chains.\",\"params\":{\"_eid\":\"The endpoint ID.\",\"_peer\":\"The address of the peer to be associated with the corresponding endpoint.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"RateLimitExceeded()\":[{\"notice\":\"Error that is thrown when an amount exceeds the rate_limit.\"}]},\"events\":{\"RateLimitsChanged((uint32,uint256,uint256)[])\":{\"notice\":\"Emitted when _setRateLimits occurs.\"}},\"kind\":\"user\",\"methods\":{\"allowInitializePath((uint32,bytes32,uint64))\":{\"notice\":\"Checks if the path initialization is allowed based on the provided origin.\"},\"endpoint()\":{\"notice\":\"Retrieves the LayerZero endpoint associated with the OApp.\"},\"getAmountCanBeSent(uint32)\":{\"notice\":\"Get the current amount that can be sent to this destination endpoint id for the given rate limit window.\"},\"isComposeMsgSender((uint32,bytes32,uint64),bytes,address)\":{\"notice\":\"Indicates whether an address is an approved composeMsg sender to the Endpoint.\"},\"nextNonce(uint32,bytes32)\":{\"notice\":\"Retrieves the next nonce for a given source endpoint and sender address.\"},\"oAppVersion()\":{\"notice\":\"Retrieves the OApp version information.\"},\"peers(uint32)\":{\"notice\":\"Retrieves the peer (OApp) associated with a corresponding endpoint.\"},\"setDelegate(address)\":{\"notice\":\"Sets the delegate address for the OApp.\"},\"setPeer(uint32,bytes32)\":{\"notice\":\"Sets the peer address (OApp instance) for a corresponding endpoint.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MultiChainMessenger.sol\":\"MultiChainMessenger\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { IMessageLibManager } from \\\"./IMessageLibManager.sol\\\";\\nimport { IMessagingComposer } from \\\"./IMessagingComposer.sol\\\";\\nimport { IMessagingChannel } from \\\"./IMessagingChannel.sol\\\";\\nimport { IMessagingContext } from \\\"./IMessagingContext.sol\\\";\\n\\nstruct MessagingParams {\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes message;\\n    bytes options;\\n    bool payInLzToken;\\n}\\n\\nstruct MessagingReceipt {\\n    bytes32 guid;\\n    uint64 nonce;\\n    MessagingFee fee;\\n}\\n\\nstruct MessagingFee {\\n    uint256 nativeFee;\\n    uint256 lzTokenFee;\\n}\\n\\nstruct Origin {\\n    uint32 srcEid;\\n    bytes32 sender;\\n    uint64 nonce;\\n}\\n\\ninterface ILayerZeroEndpointV2 is IMessageLibManager, IMessagingComposer, IMessagingChannel, IMessagingContext {\\n    event PacketSent(bytes encodedPayload, bytes options, address sendLibrary);\\n\\n    event PacketVerified(Origin origin, address receiver, bytes32 payloadHash);\\n\\n    event PacketDelivered(Origin origin, address receiver);\\n\\n    event LzReceiveAlert(\\n        address indexed receiver,\\n        address indexed executor,\\n        Origin origin,\\n        bytes32 guid,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    event LzTokenSet(address token);\\n\\n    event DelegateSet(address sender, address delegate);\\n\\n    function quote(MessagingParams calldata _params, address _sender) external view returns (MessagingFee memory);\\n\\n    function send(\\n        MessagingParams calldata _params,\\n        address _refundAddress\\n    ) external payable returns (MessagingReceipt memory);\\n\\n    function verify(Origin calldata _origin, address _receiver, bytes32 _payloadHash) external;\\n\\n    function verifiable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function initializable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        address _receiver,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n\\n    // oapp can burn messages partially by calling this function with its own business logic if messages are verified in order\\n    function clear(address _oapp, Origin calldata _origin, bytes32 _guid, bytes calldata _message) external;\\n\\n    function setLzToken(address _lzToken) external;\\n\\n    function lzToken() external view returns (address);\\n\\n    function nativeToken() external view returns (address);\\n\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0xf7f941bee89ea6369950fe54e8ac476ae6478b958b20fc0e8a83e8ff1364eac3\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { Origin } from \\\"./ILayerZeroEndpointV2.sol\\\";\\n\\ninterface ILayerZeroReceiver {\\n    function allowInitializePath(Origin calldata _origin) external view returns (bool);\\n\\n    function nextNonce(uint32 _eid, bytes32 _sender) external view returns (uint64);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x9641abba8d53b08bb517d1b74801dd15ea7b84d77a6719085bd96c8ea94e3ca0\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nstruct SetConfigParam {\\n    uint32 eid;\\n    uint32 configType;\\n    bytes config;\\n}\\n\\ninterface IMessageLibManager {\\n    struct Timeout {\\n        address lib;\\n        uint256 expiry;\\n    }\\n\\n    event LibraryRegistered(address newLib);\\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint256 expiry);\\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\\n    event ReceiveLibrarySet(address receiver, uint32 eid, address newLib);\\n    event ReceiveLibraryTimeoutSet(address receiver, uint32 eid, address oldLib, uint256 timeout);\\n\\n    function registerLibrary(address _lib) external;\\n\\n    function isRegisteredLibrary(address _lib) external view returns (bool);\\n\\n    function getRegisteredLibraries() external view returns (address[] memory);\\n\\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function defaultReceiveLibraryTimeout(uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    function isValidReceiveLibrary(address _receiver, uint32 _eid, address _lib) external view returns (bool);\\n\\n    /// ------------------- OApp interfaces -------------------\\n    function setSendLibrary(address _oapp, uint32 _eid, address _newLib) external;\\n\\n    function getSendLibrary(address _sender, uint32 _eid) external view returns (address lib);\\n\\n    function isDefaultSendLibrary(address _sender, uint32 _eid) external view returns (bool);\\n\\n    function setReceiveLibrary(address _oapp, uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function getReceiveLibrary(address _receiver, uint32 _eid) external view returns (address lib, bool isDefault);\\n\\n    function setReceiveLibraryTimeout(address _oapp, uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function receiveLibraryTimeout(address _receiver, uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function setConfig(address _oapp, address _lib, SetConfigParam[] calldata _params) external;\\n\\n    function getConfig(\\n        address _oapp,\\n        address _lib,\\n        uint32 _eid,\\n        uint32 _configType\\n    ) external view returns (bytes memory config);\\n}\\n\",\"keccak256\":\"0x919b37133adff4dc528e3061deb2789c3149971b530c61e556fb3d09ab315dfc\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingChannel {\\n    event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce);\\n    event PacketNilified(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n    event PacketBurnt(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n\\n    function eid() external view returns (uint32);\\n\\n    // this is an emergency function if a message cannot be verified for some reasons\\n    // required to provide _nextNonce to avoid race condition\\n    function skip(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce) external;\\n\\n    function nilify(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function burn(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function nextGuid(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (bytes32);\\n\\n    function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n\\n    function outboundNonce(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (uint64);\\n\\n    function inboundPayloadHash(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce\\n    ) external view returns (bytes32);\\n\\n    function lazyInboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x0878f64dffebf58c4165569416372f40860fab546b88cd926eba0d5cb6d8d972\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingComposer {\\n    event ComposeSent(address from, address to, bytes32 guid, uint16 index, bytes message);\\n    event ComposeDelivered(address from, address to, bytes32 guid, uint16 index);\\n    event LzComposeAlert(\\n        address indexed from,\\n        address indexed to,\\n        address indexed executor,\\n        bytes32 guid,\\n        uint16 index,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    function composeQueue(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index\\n    ) external view returns (bytes32 messageHash);\\n\\n    function sendCompose(address _to, bytes32 _guid, uint16 _index, bytes calldata _message) external;\\n\\n    function lzCompose(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x85bc7090134529ec474866dc4bb1c48692d518c756eb0a961c82574829c51901\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingContext {\\n    function isSendingMessage() external view returns (bool);\\n\\n    function getSendContext() external view returns (uint32 dstEid, address sender);\\n}\\n\",\"keccak256\":\"0xff0c546c2813dae3e440882f46b377375f7461b0714efd80bd3f0c6e5cb8da4e\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n// @dev Import the 'MessagingFee' and 'MessagingReceipt' so it's exposed to OApp implementers\\n// solhint-disable-next-line no-unused-import\\nimport { OAppSender, MessagingFee, MessagingReceipt } from \\\"./OAppSender.sol\\\";\\n// @dev Import the 'Origin' so it's exposed to OApp implementers\\n// solhint-disable-next-line no-unused-import\\nimport { OAppReceiver, Origin } from \\\"./OAppReceiver.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OApp\\n * @dev Abstract contract serving as the base for OApp implementation, combining OAppSender and OAppReceiver functionality.\\n */\\nabstract contract OApp is OAppSender, OAppReceiver {\\n    /**\\n     * @dev Constructor to initialize the OApp with the provided endpoint and owner.\\n     * @param _endpoint The address of the LOCAL LayerZero endpoint.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     */\\n    constructor(address _endpoint, address _delegate) OAppCore(_endpoint, _delegate) {}\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol implementation.\\n     * @return receiverVersion The version of the OAppReceiver.sol implementation.\\n     */\\n    function oAppVersion()\\n        public\\n        pure\\n        virtual\\n        override(OAppSender, OAppReceiver)\\n        returns (uint64 senderVersion, uint64 receiverVersion)\\n    {\\n        return (SENDER_VERSION, RECEIVER_VERSION);\\n    }\\n}\\n\",\"keccak256\":\"0xac362c4c291fad2f1511a968424b2e78a5ad502d1c867bd31da04be742aca8c5\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IOAppCore, ILayerZeroEndpointV2 } from \\\"./interfaces/IOAppCore.sol\\\";\\n\\n/**\\n * @title OAppCore\\n * @dev Abstract contract implementing the IOAppCore interface with basic OApp configurations.\\n */\\nabstract contract OAppCore is IOAppCore, Ownable {\\n    // The LayerZero endpoint associated with the given OApp\\n    ILayerZeroEndpointV2 public immutable endpoint;\\n\\n    // Mapping to store peers associated with corresponding endpoints\\n    mapping(uint32 eid => bytes32 peer) public peers;\\n\\n    /**\\n     * @dev Constructor to initialize the OAppCore with the provided endpoint and delegate.\\n     * @param _endpoint The address of the LOCAL Layer Zero endpoint.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     *\\n     * @dev The delegate typically should be set as the owner of the contract.\\n     */\\n    constructor(address _endpoint, address _delegate) {\\n        endpoint = ILayerZeroEndpointV2(_endpoint);\\n\\n        if (_delegate == address(0)) revert InvalidDelegate();\\n        endpoint.setDelegate(_delegate);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) public virtual onlyOwner {\\n        _setPeer(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function _setPeer(uint32 _eid, bytes32 _peer) internal virtual {\\n        peers[_eid] = _peer;\\n        emit PeerSet(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Internal function to get the peer address associated with a specific endpoint; reverts if NOT set.\\n     * ie. the peer is set to bytes32(0).\\n     * @param _eid The endpoint ID.\\n     * @return peer The address of the peer associated with the specified endpoint.\\n     */\\n    function _getPeerOrRevert(uint32 _eid) internal view virtual returns (bytes32) {\\n        bytes32 peer = peers[_eid];\\n        if (peer == bytes32(0)) revert NoPeer(_eid);\\n        return peer;\\n    }\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp.\\n     * @param _delegate The address of the delegate to be set.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\\n     */\\n    function setDelegate(address _delegate) public onlyOwner {\\n        endpoint.setDelegate(_delegate);\\n    }\\n}\\n\",\"keccak256\":\"0x13a9c2d1d2c1f086b8624f2e84c4a4702212daae36f701d92bb915b535cbe4cc\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { IOAppReceiver, Origin } from \\\"./interfaces/IOAppReceiver.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OAppReceiver\\n * @dev Abstract contract implementing the ILayerZeroReceiver interface and extending OAppCore for OApp receivers.\\n */\\nabstract contract OAppReceiver is IOAppReceiver, OAppCore {\\n    // Custom error message for when the caller is not the registered endpoint/\\n    error OnlyEndpoint(address addr);\\n\\n    // @dev The version of the OAppReceiver implementation.\\n    // @dev Version is bumped when changes are made to this contract.\\n    uint64 internal constant RECEIVER_VERSION = 2;\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     *\\n     * @dev Providing 0 as the default for OAppSender version. Indicates that the OAppSender is not implemented.\\n     * ie. this is a RECEIVE only OApp.\\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions.\\n     */\\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\\n        return (0, RECEIVER_VERSION);\\n    }\\n\\n    /**\\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\\n     * @dev _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @dev _message The lzReceive payload.\\n     * @param _sender The sender address.\\n     * @return isSender Is a valid sender.\\n     *\\n     * @dev Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.\\n     * @dev The default sender IS the OAppReceiver implementer.\\n     */\\n    function isComposeMsgSender(\\n        Origin calldata /*_origin*/,\\n        bytes calldata /*_message*/,\\n        address _sender\\n    ) public view virtual returns (bool) {\\n        return _sender == address(this);\\n    }\\n\\n    /**\\n     * @notice Checks if the path initialization is allowed based on the provided origin.\\n     * @param origin The origin information containing the source endpoint and sender address.\\n     * @return Whether the path has been initialized.\\n     *\\n     * @dev This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.\\n     * @dev This defaults to assuming if a peer has been set, its initialized.\\n     * Can be overridden by the OApp if there is other logic to determine this.\\n     */\\n    function allowInitializePath(Origin calldata origin) public view virtual returns (bool) {\\n        return peers[origin.srcEid] == origin.sender;\\n    }\\n\\n    /**\\n     * @notice Retrieves the next nonce for a given source endpoint and sender address.\\n     * @dev _srcEid The source endpoint ID.\\n     * @dev _sender The sender address.\\n     * @return nonce The next nonce.\\n     *\\n     * @dev The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.\\n     * @dev Is required by the off-chain executor to determine the OApp expects msg execution is ordered.\\n     * @dev This is also enforced by the OApp.\\n     * @dev By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.\\n     */\\n    function nextNonce(uint32 /*_srcEid*/, bytes32 /*_sender*/) public view virtual returns (uint64 nonce) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Entry point for receiving messages or packets from the endpoint.\\n     * @param _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @param _guid The unique identifier for the received LayerZero message.\\n     * @param _message The payload of the received message.\\n     * @param _executor The address of the executor for the received message.\\n     * @param _extraData Additional arbitrary data provided by the corresponding executor.\\n     *\\n     * @dev Entry point for receiving msg/packet from the LayerZero endpoint.\\n     */\\n    function lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) public payable virtual {\\n        // Ensures that only the endpoint can attempt to lzReceive() messages to this OApp.\\n        if (address(endpoint) != msg.sender) revert OnlyEndpoint(msg.sender);\\n\\n        // Ensure that the sender matches the expected peer for the source endpoint.\\n        if (_getPeerOrRevert(_origin.srcEid) != _origin.sender) revert OnlyPeer(_origin.srcEid, _origin.sender);\\n\\n        // Call the internal OApp implementation of lzReceive.\\n        _lzReceive(_origin, _guid, _message, _executor, _extraData);\\n    }\\n\\n    /**\\n     * @dev Internal function to implement lzReceive logic without needing to copy the basic parameter validation.\\n     */\\n    function _lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0x0174e9f1ec4cefe4b5adc26c392269c699b9ff75965364e5b7264426a462c70b\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { SafeERC20, IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { MessagingParams, MessagingFee, MessagingReceipt } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OAppSender\\n * @dev Abstract contract implementing the OAppSender functionality for sending messages to a LayerZero endpoint.\\n */\\nabstract contract OAppSender is OAppCore {\\n    using SafeERC20 for IERC20;\\n\\n    // Custom error messages\\n    error NotEnoughNative(uint256 msgValue);\\n    error LzTokenUnavailable();\\n\\n    // @dev The version of the OAppSender implementation.\\n    // @dev Version is bumped when changes are made to this contract.\\n    uint64 internal constant SENDER_VERSION = 1;\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     *\\n     * @dev Providing 0 as the default for OAppReceiver version. Indicates that the OAppReceiver is not implemented.\\n     * ie. this is a SEND only OApp.\\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions\\n     */\\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\\n        return (SENDER_VERSION, 0);\\n    }\\n\\n    /**\\n     * @dev Internal function to interact with the LayerZero EndpointV2.quote() for fee calculation.\\n     * @param _dstEid The destination endpoint ID.\\n     * @param _message The message payload.\\n     * @param _options Additional options for the message.\\n     * @param _payInLzToken Flag indicating whether to pay the fee in LZ tokens.\\n     * @return fee The calculated MessagingFee for the message.\\n     *      - nativeFee: The native fee for the message.\\n     *      - lzTokenFee: The LZ token fee for the message.\\n     */\\n    function _quote(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        bool _payInLzToken\\n    ) internal view virtual returns (MessagingFee memory fee) {\\n        return\\n            endpoint.quote(\\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _payInLzToken),\\n                address(this)\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal function to interact with the LayerZero EndpointV2.send() for sending a message.\\n     * @param _dstEid The destination endpoint ID.\\n     * @param _message The message payload.\\n     * @param _options Additional options for the message.\\n     * @param _fee The calculated LayerZero fee for the message.\\n     *      - nativeFee: The native fee.\\n     *      - lzTokenFee: The lzToken fee.\\n     * @param _refundAddress The address to receive any excess fee values sent to the endpoint.\\n     * @return receipt The receipt for the sent message.\\n     *      - guid: The unique identifier for the sent message.\\n     *      - nonce: The nonce of the sent message.\\n     *      - fee: The LayerZero fee incurred for the message.\\n     */\\n    function _lzSend(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        MessagingFee memory _fee,\\n        address _refundAddress\\n    ) internal virtual returns (MessagingReceipt memory receipt) {\\n        // @dev Push corresponding fees to the endpoint, any excess is sent back to the _refundAddress from the endpoint.\\n        uint256 messageValue = _payNative(_fee.nativeFee);\\n        if (_fee.lzTokenFee > 0) _payLzToken(_fee.lzTokenFee);\\n\\n        return\\n            // solhint-disable-next-line check-send-result\\n            endpoint.send{ value: messageValue }(\\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _fee.lzTokenFee > 0),\\n                _refundAddress\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal function to pay the native fee associated with the message.\\n     * @param _nativeFee The native fee to be paid.\\n     * @return nativeFee The amount of native currency paid.\\n     *\\n     * @dev If the OApp needs to initiate MULTIPLE LayerZero messages in a single transaction,\\n     * this will need to be overridden because msg.value would contain multiple lzFees.\\n     * @dev Should be overridden in the event the LayerZero endpoint requires a different native currency.\\n     * @dev Some EVMs use an ERC20 as a method for paying transactions/gasFees.\\n     * @dev The endpoint is EITHER/OR, ie. it will NOT support both types of native payment at a time.\\n     */\\n    function _payNative(uint256 _nativeFee) internal virtual returns (uint256 nativeFee) {\\n        if (msg.value != _nativeFee) revert NotEnoughNative(msg.value);\\n        return _nativeFee;\\n    }\\n\\n    /**\\n     * @dev Internal function to pay the LZ token fee associated with the message.\\n     * @param _lzTokenFee The LZ token fee to be paid.\\n     *\\n     * @dev If the caller is trying to pay in the specified lzToken, then the lzTokenFee is passed to the endpoint.\\n     * @dev Any excess sent, is passed back to the specified _refundAddress in the _lzSend().\\n     */\\n    function _payLzToken(uint256 _lzTokenFee) internal virtual {\\n        // @dev Cannot cache the token because it is not immutable in the endpoint.\\n        address lzToken = endpoint.lzToken();\\n        if (lzToken == address(0)) revert LzTokenUnavailable();\\n\\n        // Pay LZ token fee by sending tokens to the endpoint.\\n        IERC20(lzToken).safeTransferFrom(msg.sender, address(endpoint), _lzTokenFee);\\n    }\\n}\\n\",\"keccak256\":\"0x518cf4adca601923ed4baa6619846a253ea32b8d8775f8bc1faa3dfac7f67c20\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroEndpointV2 } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\n\\n/**\\n * @title IOAppCore\\n */\\ninterface IOAppCore {\\n    // Custom error messages\\n    error OnlyPeer(uint32 eid, bytes32 sender);\\n    error NoPeer(uint32 eid);\\n    error InvalidEndpointCall();\\n    error InvalidDelegate();\\n\\n    // Event emitted when a peer (OApp) is set for a corresponding endpoint\\n    event PeerSet(uint32 eid, bytes32 peer);\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     */\\n    function oAppVersion() external view returns (uint64 senderVersion, uint64 receiverVersion);\\n\\n    /**\\n     * @notice Retrieves the LayerZero endpoint associated with the OApp.\\n     * @return iEndpoint The LayerZero endpoint as an interface.\\n     */\\n    function endpoint() external view returns (ILayerZeroEndpointV2 iEndpoint);\\n\\n    /**\\n     * @notice Retrieves the peer (OApp) associated with a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @return peer The peer address (OApp instance) associated with the corresponding endpoint.\\n     */\\n    function peers(uint32 _eid) external view returns (bytes32 peer);\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) external;\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp Core.\\n     * @param _delegate The address of the delegate to be set.\\n     */\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0x40e49f2de74506e1da5dcaed53a39853f691647f4ceb0fccc8f49a68d3f47c58\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroReceiver, Origin } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\\\";\\n\\ninterface IOAppReceiver is ILayerZeroReceiver {\\n    /**\\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\\n     * @param _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @param _message The lzReceive payload.\\n     * @param _sender The sender address.\\n     * @return isSender Is a valid sender.\\n     *\\n     * @dev Applications can optionally choose to implement a separate composeMsg sender that is NOT the bridging layer.\\n     * @dev The default sender IS the OAppReceiver implementer.\\n     */\\n    function isComposeMsgSender(\\n        Origin calldata _origin,\\n        bytes calldata _message,\\n        address _sender\\n    ) external view returns (bool isSender);\\n}\\n\",\"keccak256\":\"0xd26135185e19b3732746d4a9e2923e896f28dec8664bab161faea2ee26fcdc3d\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/utils/RateLimiter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title RateLimiter\\n * @dev Abstract contract for implementing rate limiting functionality. This contract provides a basic framework for\\n * rate limiting how often a function can be executed. It is designed to be inherited by other contracts requiring rate\\n * limiting capabilities to protect resources or services from excessive use.\\n *\\n * Example 1: Max rate limit reached at beginning of window. As time continues the amount of in flights comes down.\\n *\\n * Rate Limit Config:\\n *   limit: 100 units\\n *   window: 60 seconds\\n *\\n *                              Amount in Flight (units) vs. Time Graph (seconds)\\n *\\n *      100 | * - (Max limit reached at beginning of window)\\n *          |   *\\n *          |     *\\n *          |       *\\n *       50 |         * (After 30 seconds only 50 units in flight)\\n *          |           *\\n *          |             *\\n *          |               *\\n *       0  +--|---|---|---|---|-->(After 60 seconds 0 units are in flight)\\n *             0  15  30  45  60 (seconds)\\n *\\n * Example 2: Max rate limit reached at beginning of window. As time continues the amount of in flights comes down\\n * allowing for more to be sent. At the 90 second mark, more in flights come in.\\n *\\n * Rate Limit Config:\\n *   limit: 100 units\\n *   window: 60 seconds\\n *\\n *                              Amount in Flight (units) vs. Time Graph (seconds)\\n *\\n *      100 | * - (Max limit reached at beginning of window)\\n *          |   *\\n *          |     *\\n *          |       *\\n *       50 |         *          * (50 inflight)\\n *          |           *          *\\n *          |             *          *\\n *          |               *          *\\n *        0  +--|--|--|--|--|--|--|--|--|--> Time\\n *              0 15 30 45 60 75 90 105 120  (seconds)\\n *\\n * Example 3: Max rate limit reached at beginning of window. At the 15 second mark, the window gets updated to 60\\n * seconds and the limit gets updated to 50 units. This scenario shows the direct depiction of \\\"in flight\\\" from the\\n * previous window affecting the current window.\\n *\\n * Initial Rate Limit Config: For first 15 seconds\\n *   limit: 100 units\\n *   window: 30 seconds\\n *\\n * Updated Rate Limit Config: Updated at 15 second mark\\n *   limit: 50 units\\n *   window: 60 seconds\\n *\\n *                              Amount in Flight (units) vs. Time Graph (seconds)\\n *      100 - *\\n *            |*\\n *            | *\\n *            |  *\\n *            |   *\\n *            |    *\\n *            |     *\\n *       75 - |      *\\n *            |       *\\n *            |        *\\n *            |         *\\n *            |          *\\n *            |           *\\n *            |            *\\n *            |             *\\n *       50 - |              \\ud802\\udef0 <--(Slope changes at the 15 second mark because of the update.\\n *            |               \\u2727 *      Window extended to 60 seconds and limit reduced to 50 units.\\n *            |                \\u2727 \\ufe0e   *      Because amountInFlight/lastUpdated do not reset, 50 units are\\n *            |                 \\u2727       *      considered in flight from the previous window and the corresponding\\n *            |                  \\u2727 \\ufe0e          *     decay from the previous rate.)\\n *            |                   \\u2727              *\\n *       25 - |                    \\u2727                 *\\n *            |                     \\u2727                    *\\n *            |                      \\u2727                        *\\n *            |                       \\u2727                           *\\n *            |                        \\u2727                              *\\n *            |                         \\u2727                                  *\\n *            |                          \\u2727                                     *\\n *            |                           \\u2727                                        *\\n *        0 - +---|----|----|----|----|----|----|----|----|----|----|----|----|----|----|----|----|----|----> Time\\n *            0   5    10   15   20   25   30   35   40   45   50   55   60   65   70   75   80   85   90 (seconds)\\n *            [  Initial 30 Second Window  ]\\n *                          [ --------------- Extended 60 Second Window --------------- ]\\n */\\nabstract contract RateLimiter {\\n    /**\\n     * @notice Rate Limit struct.\\n     * @param amountInFlight The amount in the current window.\\n     * @param lastUpdated Timestamp representing the last time the rate limit was checked or updated.\\n     * @param limit This represents the maximum allowed amount within a given window.\\n     * @param window Defines the duration of the rate limiting window.\\n     */\\n    struct RateLimit {\\n        uint256 amountInFlight;\\n        uint256 lastUpdated;\\n        uint256 limit;\\n        uint256 window;\\n    }\\n\\n    /**\\n     * @notice Rate Limit Configuration struct.\\n     * @param dstEid The destination endpoint id.\\n     * @param limit This represents the maximum allowed amount within a given window.\\n     * @param window Defines the duration of the rate limiting window.\\n     */\\n    struct RateLimitConfig {\\n        uint32 dstEid;\\n        uint256 limit;\\n        uint256 window;\\n    }\\n\\n    /**\\n     * @dev Mapping from destination endpoint id to RateLimit Configurations.\\n     */\\n    mapping(uint32 dstEid => RateLimit limit) public rateLimits;\\n\\n    /**\\n     * @notice Emitted when _setRateLimits occurs.\\n     * @param rateLimitConfigs An array of `RateLimitConfig` structs representing the rate limit configurations set.\\n     * - `dstEid`: The destination endpoint id.\\n     * - `limit`: This represents the maximum allowed amount within a given window.\\n     * - `window`: Defines the duration of the rate limiting window.\\n     */\\n    event RateLimitsChanged(RateLimitConfig[] rateLimitConfigs);\\n\\n    /**\\n     * @notice Error that is thrown when an amount exceeds the rate_limit.\\n     */\\n    error RateLimitExceeded();\\n\\n    /**\\n     * @notice Get the current amount that can be sent to this destination endpoint id for the given rate limit window.\\n     * @param _dstEid The destination endpoint id.\\n     * @return currentAmountInFlight The current amount that was sent.\\n     * @return amountCanBeSent The amount that can be sent.\\n     */\\n    function getAmountCanBeSent(\\n        uint32 _dstEid\\n    ) external view virtual returns (uint256 currentAmountInFlight, uint256 amountCanBeSent) {\\n        RateLimit memory rl = rateLimits[_dstEid];\\n        return _amountCanBeSent(rl.amountInFlight, rl.lastUpdated, rl.limit, rl.window);\\n    }\\n\\n    /**\\n     * @notice Sets the Rate Limit.\\n     * @param _rateLimitConfigs A `RateLimitConfig` struct representing the rate limit configuration.\\n     * - `dstEid`: The destination endpoint id.\\n     * - `limit`: This represents the maximum allowed amount within a given window.\\n     * - `window`: Defines the duration of the rate limiting window.\\n     */\\n    function _setRateLimits(RateLimitConfig[] memory _rateLimitConfigs) internal virtual {\\n        unchecked {\\n            for (uint256 i = 0; i < _rateLimitConfigs.length; i++) {\\n                RateLimit storage rl = rateLimits[_rateLimitConfigs[i].dstEid];\\n\\n                // @dev Ensure we checkpoint the existing rate limit as to not retroactively apply the new decay rate.\\n                _checkAndUpdateRateLimit(_rateLimitConfigs[i].dstEid, 0);\\n\\n                // @dev Does NOT reset the amountInFlight/lastUpdated of an existing rate limit.\\n                rl.limit = _rateLimitConfigs[i].limit;\\n                rl.window = _rateLimitConfigs[i].window;\\n            }\\n        }\\n        emit RateLimitsChanged(_rateLimitConfigs);\\n    }\\n\\n    /**\\n     * @notice Checks current amount in flight and amount that can be sent for a given rate limit window.\\n     * @param _amountInFlight The amount in the current window.\\n     * @param _lastUpdated Timestamp representing the last time the rate limit was checked or updated.\\n     * @param _limit This represents the maximum allowed amount within a given window.\\n     * @param _window Defines the duration of the rate limiting window.\\n     * @return currentAmountInFlight The amount in the current window.\\n     * @return amountCanBeSent The amount that can be sent.\\n     */\\n    function _amountCanBeSent(\\n        uint256 _amountInFlight,\\n        uint256 _lastUpdated,\\n        uint256 _limit,\\n        uint256 _window\\n    ) internal view virtual returns (uint256 currentAmountInFlight, uint256 amountCanBeSent) {\\n        uint256 timeSinceLastDeposit = block.timestamp - _lastUpdated;\\n        if (timeSinceLastDeposit >= _window) {\\n            currentAmountInFlight = 0;\\n            amountCanBeSent = _limit;\\n        } else {\\n            // @dev Presumes linear decay.\\n            uint256 decay = (_limit * timeSinceLastDeposit) / _window;\\n            currentAmountInFlight = _amountInFlight <= decay ? 0 : _amountInFlight - decay;\\n            // @dev In the event the _limit is lowered, and the 'in-flight' amount is higher than the _limit, set to 0.\\n            amountCanBeSent = _limit <= currentAmountInFlight ? 0 : _limit - currentAmountInFlight;\\n        }\\n    }\\n\\n    /**\\n     * @notice Verifies whether the specified amount falls within the rate limit constraints for the targeted\\n     * endpoint ID. On successful verification, it updates amountInFlight and lastUpdated. If the amount exceeds\\n     * the rate limit, the operation reverts.\\n     * @param _dstEid The destination endpoint id.\\n     * @param _amount The amount to check for rate limit constraints.\\n     */\\n    function _checkAndUpdateRateLimit(uint32 _dstEid, uint256 _amount) internal virtual {\\n        // @dev By default dstEid that have not been explicitly set will return amountCanBeSent == 0.\\n        RateLimit storage rl = rateLimits[_dstEid];\\n\\n        (uint256 currentAmountInFlight, uint256 amountCanBeSent) = _amountCanBeSent(\\n            rl.amountInFlight,\\n            rl.lastUpdated,\\n            rl.limit,\\n            rl.window\\n        );\\n        if (_amount > amountCanBeSent) revert RateLimitExceeded();\\n\\n        // @dev Update the storage to contain the new amount and current timestamp.\\n        rl.amountInFlight = currentAmountInFlight + _amount;\\n        rl.lastUpdated = block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0xe6c1170309badf8993fd42758ed51404556f4002d9a50392de8c360255b60244\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/MultiChainMessenger.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport \\\"@layerzerolabs/oapp-evm/contracts/oapp/OApp.sol\\\";\\nimport \\\"@layerzerolabs/oapp-evm/contracts/oapp/utils/RateLimiter.sol\\\";\\nimport \\\"@layerzerolabs/oapp-evm/contracts/oapp/OAppSender.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract MultiChainMessenger is OApp, RateLimiter {\\n    event MessageSent(uint32 indexed dstEid, string sender, string data, string key);\\n    event MessageReceived(uint32 indexed srcEid, string sender, string data, string key);\\n\\n    mapping(uint32 => uint64) private receivedNonces;\\n    uint16 public constant SEND_MESSAGE = 1;\\n    \\n    bool private _locked;\\n\\n    modifier nonReentrant() {\\n        require(!_locked, \\\"Reentrant call\\\");\\n        _locked = true;\\n        _;\\n        _locked = false;\\n    }\\n\\n    constructor(address _endpoint, address _owner, RateLimitConfig[] memory _rateLimitConfigs) \\n        OApp(_endpoint, _owner)\\n        Ownable(_owner)\\n    {\\n        _setRateLimits(_rateLimitConfigs);\\n    }\\n\\n    function sendMessage(uint32[] calldata dstEids, string memory sender, string memory data, string memory key) \\n        external \\n        payable \\n        nonReentrant \\n    {\\n        require(bytes(sender).length > 0, \\\"Sender cannot be empty\\\");\\n        require(bytes(data).length > 0, \\\"Data cannot be empty\\\");\\n        require(bytes(key).length > 0, \\\"Key cannot be empty\\\");\\n        \\n        bytes memory payload = abi.encode(sender, data, key);\\n        uint256 totalFee = 0;\\n        \\n        for (uint i = 0; i < dstEids.length; i++) {\\n            _checkAndUpdateRateLimit(dstEids[i], 1);\\n            \\n            bytes memory options = \\\"\\\";  // Use empty options or define as needed\\n            \\n            MessagingFee memory fee = _quote(dstEids[i], payload, options, false);\\n            totalFee += fee.nativeFee;\\n            \\n            _lzSend(\\n                dstEids[i],\\n                payload,\\n                options,\\n                MessagingFee(fee.nativeFee, 0),\\n                payable(msg.sender)\\n            );\\n            \\n            emit MessageSent(dstEids[i], sender, data, key);\\n        }\\n        \\n        require(msg.value >= totalFee, \\\"Insufficient fee\\\");\\n        if (msg.value > totalFee) {\\n            payable(msg.sender).transfer(msg.value - totalFee);\\n        }\\n    }\\n\\n    function _lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) internal override {\\n        uint64 nonce = _origin.nonce;\\n        require(nonce == receivedNonces[_origin.srcEid] + 1, \\\"Invalid nonce\\\");\\n        receivedNonces[_origin.srcEid] = nonce;\\n\\n        (string memory sender, string memory data, string memory key) = abi.decode(_message, (string, string, string));\\n        emit MessageReceived(_origin.srcEid, sender, data, key);\\n    }\\n\\n    function quote(uint32 _dstEid, string memory sender, string memory data, string memory key) \\n        public \\n        view \\n        returns (MessagingFee memory fee) \\n    {\\n        bytes memory payload = abi.encode(sender, data, key);\\n        bytes memory options = \\\"\\\";  // Use empty options or define as needed\\n        return _quote(_dstEid, payload, options, false);\\n    }\\n\\n    function setRateLimits(RateLimitConfig[] calldata _rateLimitConfigs) external onlyOwner {\\n        _setRateLimits(_rateLimitConfigs);\\n    }\\n\\n    function withdraw() external onlyOwner {\\n        payable(owner()).transfer(address(this).balance);\\n    }\\n}\",\"keccak256\":\"0x64c9fb88d4861c124539912eb344b44b82e47d39c1aa4be31162cbd62e93cfca\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620023ff380380620023ff833981016040819052620000349162000428565b82828181806001600160a01b0381166200006857604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b620000738162000121565b506001600160a01b038083166080528116620000a257604051632d618d8160e21b815260040160405180910390fd5b60805160405163ca5eb5e160e01b81526001600160a01b0383811660048301529091169063ca5eb5e190602401600060405180830381600087803b158015620000ea57600080fd5b505af1158015620000ff573d6000803e3d6000fd5b505050505050505062000118816200017160201b60201c565b50505062000643565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60005b8151811015620002505760006002600084848151811062000199576200019962000547565b60200260200101516000015163ffffffff1663ffffffff1681526020019081526020016000209050620001f4838381518110620001da57620001da62000547565b60200260200101516000015160006200028d60201b60201c565b82828151811062000209576200020962000547565b602002602001015160200151816002018190555082828151811062000232576200023262000547565b60209081029190910101516040015160039091015560010162000174565b507fe888347665897e637801f36c5129f510657276178c89022bc5fa0246dbc19de1816040516200028291906200055d565b60405180910390a150565b63ffffffff821660009081526002602081905260408220805460018201549282015460038301549294938493620002c693929062000307565b9150915080841115620002ec5760405163a74c1c5f60e01b815260040160405180910390fd5b620002f88483620005d4565b83555050426001909101555050565b60008080620003178642620005f0565b90508381106200032e57600092508491506200038d565b6000846200033d838862000606565b62000349919062000620565b9050808811156200036657620003608189620005f0565b62000369565b60005b9350838611156200038657620003808487620005f0565b62000389565b60005b9250505b5094509492505050565b80516001600160a01b0381168114620003af57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b0381118282101715620003ef57620003ef620003b4565b60405290565b604051601f8201601f191681016001600160401b0381118282101715620004205762000420620003b4565b604052919050565b600080600060608085870312156200043f57600080fd5b6200044a8562000397565b935060206200045b81870162000397565b604087810151919550906001600160401b03808211156200047b57600080fd5b818901915089601f8301126200049057600080fd5b815181811115620004a557620004a5620003b4565b620004b5858260051b01620003f5565b8181528581019250606090910283018501908b821115620004d557600080fd5b928501925b81841015620005365786848d031215620004f45760008081fd5b620004fe620003ca565b845163ffffffff81168114620005145760008081fd5b81528487015187820152858501518682015283529286019291850191620004da565b809750505050505050509250925092565b634e487b7160e01b600052603260045260246000fd5b602080825282518282018190526000919060409081850190868401855b82811015620005b1578151805163ffffffff168552868101518786015285015185850152606090930192908501906001016200057a565b5091979650505050505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115620005ea57620005ea620005be565b92915050565b81810381811115620005ea57620005ea620005be565b8082028115828204841417620005ea57620005ea620005be565b6000826200063e57634e487b7160e01b600052601260045260246000fd5b500490565b608051611d7662000689600039600081816101f70152818161044c01528181610a0301528181610cf401528181610df20152818161114101526111f80152611d766000f3fe6080604052600436106101145760003560e01c8063715018a6116100a0578063bb0b6a5311610064578063bb0b6a531461037a578063c272198d146103b5578063ca5eb5e1146103ea578063f2fde38b1461040a578063ff7bd03d1461042a57600080fd5b8063715018a61461026c5780637d25a05e1461028157806382413eac146102b95780638da5cb5b146102f8578063ab99095d1461031657600080fd5b80633ccfd60b116100e75780633ccfd60b1461018857806346f943e91461019d5780635532d645146101bd5780635e280f11146101e5578063641b807a1461023157600080fd5b806313137d651461011957806317442b701461012e5780632f137df4146101555780633400288b14610168575b600080fd5b61012c6101273660046114d0565b61044a565b005b34801561013a57600080fd5b50604080516001815260026020820152015b60405180910390f35b61012c610163366004611639565b61050a565b34801561017457600080fd5b5061012c610183366004611732565b610840565b34801561019457600080fd5b5061012c610856565b3480156101a957600080fd5b5061012c6101b836600461175c565b61089b565b3480156101c957600080fd5b506101d2600181565b60405161ffff909116815260200161014c565b3480156101f157600080fd5b506102197f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161014c565b34801561023d57600080fd5b5061025161024c3660046117d0565b6108fe565b6040805182518152602092830151928101929092520161014c565b34801561027857600080fd5b5061012c61095f565b34801561028d57600080fd5b506102a161029c366004611732565b610973565b6040516001600160401b03909116815260200161014c565b3480156102c557600080fd5b506102e86102d4366004611868565b6001600160a01b0381163014949350505050565b604051901515815260200161014c565b34801561030457600080fd5b506000546001600160a01b0316610219565b34801561032257600080fd5b5061035a6103313660046118ce565b600260208190526000918252604090912080546001820154928201546003909201549092919084565b60408051948552602085019390935291830152606082015260800161014c565b34801561038657600080fd5b506103a76103953660046118ce565b60016020526000908152604090205481565b60405190815260200161014c565b3480156103c157600080fd5b506103d56103d03660046118ce565b61097c565b6040805192835260208301919091520161014c565b3480156103f657600080fd5b5061012c6104053660046118e9565b6109dc565b34801561041657600080fd5b5061012c6104253660046118e9565b610a62565b34801561043657600080fd5b506102e8610445366004611906565b610a9d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316331461049a576040516391ac5e4f60e01b81523360048201526024015b60405180910390fd5b602087018035906104b4906104af908a6118ce565b610ad3565b146104f2576104c660208801886118ce565b60405163309afaf360e21b815263ffffffff909116600482015260208801356024820152604401610491565b61050187878787878787610b0f565b50505050505050565b60045460ff161561054e5760405162461bcd60e51b815260206004820152600e60248201526d1499595b9d1c985b9d0818d85b1b60921b6044820152606401610491565b6004805460ff1916600117905582516105a25760405162461bcd60e51b815260206004820152601660248201527553656e6465722063616e6e6f7420626520656d70747960501b6044820152606401610491565b60008251116105ea5760405162461bcd60e51b8152602060048201526014602482015273446174612063616e6e6f7420626520656d70747960601b6044820152606401610491565b60008151116106315760405162461bcd60e51b81526020600482015260136024820152724b65792063616e6e6f7420626520656d70747960681b6044820152606401610491565b600083838360405160200161064893929190611972565b60405160208183030381529060405290506000805b868110156107a95761069688888381811061067a5761067a6119ab565b905060200201602081019061068f91906118ce565b6001610c69565b604080516020810190915260008082526106d98a8a858181106106bb576106bb6119ab565b90506020020160208101906106d091906118ce565b86846000610cde565b80519091506106e890856119d7565b93506107368a8a858181106106ff576106ff6119ab565b905060200201602081019061071491906118ce565b8684604051806040016040528086600001518152602001600081525033610dbf565b50898984818110610749576107496119ab565b905060200201602081019061075e91906118ce565b63ffffffff167fc7038e6fe58091dcb1c0df6cb33f9e52f657b70ca86f51bdc4a4f1669d63b18f89898960405161079793929190611972565b60405180910390a2505060010161065d565b50803410156107ed5760405162461bcd60e51b815260206004820152601060248201526f496e73756666696369656e742066656560801b6044820152606401610491565b8034111561082d57336108fc61080383346119ea565b6040518115909202916000818181858888f1935050505015801561082b573d6000803e3d6000fd5b505b50506004805460ff191690555050505050565b610848610ebf565b6108528282610eec565b5050565b61085e610ebf565b600080546040516001600160a01b03909116914780156108fc02929091818181858888f19350505050158015610898573d6000803e3d6000fd5b50565b6108a3610ebf565b6108528282808060200260200160405190810160405280939291908181526020016000905b828210156108f4576108e5606083028601368190038101906119fd565b815260200190600101906108c8565b5050505050610f41565b6040805180820190915260008082526020820152600084848460405160200161092993929190611972565b60408051601f1981840301815260208301909152600080835290925061095490889084908490610cde565b979650505050505050565b610967610ebf565b6109716000611045565b565b60005b92915050565b63ffffffff811660009081526002602081815260408084208151608081018352815480825260018301549482018590529482015492810183905260039091015460608201819052859491936109d2939091611095565b9250925050915091565b6109e4610ebf565b60405163ca5eb5e160e01b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063ca5eb5e190602401600060405180830381600087803b158015610a4757600080fd5b505af1158015610a5b573d6000803e3d6000fd5b5050505050565b610a6a610ebf565b6001600160a01b038116610a9457604051631e4fbdf760e01b815260006004820152602401610491565b61089881611045565b6000602082018035906001908390610ab590866118ce565b63ffffffff1681526020810191909152604001600020541492915050565b63ffffffff8116600090815260016020526040812054806109765760405163f6ff4fb760e01b815263ffffffff84166004820152602401610491565b6000610b216060890160408a01611a55565b905060036000610b3460208b018b6118ce565b63ffffffff168152602081019190915260400160002054610b5f906001600160401b03166001611a72565b6001600160401b0316816001600160401b031614610baf5760405162461bcd60e51b815260206004820152600d60248201526c496e76616c6964206e6f6e636560981b6044820152606401610491565b8060036000610bc160208c018c6118ce565b63ffffffff16815260208101919091526040016000908120805467ffffffffffffffff19166001600160401b0393909316929092179091558080610c078989018a611a99565b91945092509050610c1b60208c018c6118ce565b63ffffffff167f9507536125af879f7b5c57b2e38d28b900fe1676221d6b6a934ae5c4d920c0d3848484604051610c5493929190611972565b60405180910390a25050505050505050505050565b63ffffffff821660009081526002602081905260408220805460018201549282015460038301549294938493610ca0939290611095565b9150915080841115610cc55760405163a74c1c5f60e01b815260040160405180910390fd5b610ccf84836119d7565b83555050426001909101555050565b60408051808201909152600080825260208201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ddc28c586040518060a001604052808863ffffffff168152602001610d4189610ad3565b8152602001878152602001868152602001851515815250306040518363ffffffff1660e01b8152600401610d76929190611b20565b6040805180830381865afa158015610d92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db69190611be7565b95945050505050565b610dc7611414565b6000610dd68460000151611115565b602085015190915015610df057610df0846020015161113d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632637a450826040518060a001604052808b63ffffffff168152602001610e408c610ad3565b81526020018a815260200189815260200160008960200151111515815250866040518463ffffffff1660e01b8152600401610e7c929190611b20565b60806040518083038185885af1158015610e9a573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906109549190611c03565b6000546001600160a01b031633146109715760405163118cdaa760e01b8152336004820152602401610491565b63ffffffff8216600081815260016020908152604091829020849055815192835282018390527f238399d427b947898edb290f5ff0f9109849b1c3ba196a42e35f00c50a54b98b910160405180910390a15050565b60005b815181101561100a57600060026000848481518110610f6557610f656119ab565b60200260200101516000015163ffffffff1663ffffffff1681526020019081526020016000209050610fb5838381518110610fa257610fa26119ab565b6020026020010151600001516000610c69565b828281518110610fc757610fc76119ab565b6020026020010151602001518160020181905550828281518110610fed57610fed6119ab565b602090810291909101015160400151600390910155600101610f44565b507fe888347665897e637801f36c5129f510657276178c89022bc5fa0246dbc19de18160405161103a9190611c4d565b60405180910390a150565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080806110a386426119ea565b90508381106110b8576000925084915061110b565b6000846110c58388611cac565b6110cf9190611cc3565b9050808811156110e8576110e381896119ea565b6110eb565b60005b935083861115611104576110ff84876119ea565b611107565b60005b9250505b5094509492505050565b6000813414611139576040516304fb820960e51b8152346004820152602401610491565b5090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e4fe1d946040518163ffffffff1660e01b8152600401602060405180830381865afa15801561119d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c19190611ce5565b90506001600160a01b0381166111ea576040516329b99a9560e11b815260040160405180910390fd5b6040805133602482018190527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03818116604485015260648085018890528551808603909101815260849094019094526020830180516001600160e01b03166323b872dd60e01b17905261085293851692869061126f908590611275565b50505050565b600061128a6001600160a01b038416836112dd565b905080516000141580156112af5750808060200190518101906112ad9190611d02565b155b156112d857604051635274afe760e01b81526001600160a01b0384166004820152602401610491565b505050565b60606112eb838360006112f2565b9392505050565b6060814710156113175760405163cd78605960e01b8152306004820152602401610491565b600080856001600160a01b031684866040516113339190611d24565b60006040518083038185875af1925050503d8060008114611370576040519150601f19603f3d011682016040523d82523d6000602084013e611375565b606091505b509150915061138586838361138f565b9695505050505050565b6060826113a45761139f826113eb565b6112eb565b81511580156113bb57506001600160a01b0384163b155b156113e457604051639996b31560e01b81526001600160a01b0385166004820152602401610491565b50806112eb565b8051156113fb5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60405180606001604052806000801916815260200160006001600160401b03168152602001611456604051806040016040528060008152602001600081525090565b905290565b60006060828403121561146d57600080fd5b50919050565b60008083601f84011261148557600080fd5b5081356001600160401b0381111561149c57600080fd5b6020830191508360208285010111156114b457600080fd5b9250929050565b6001600160a01b038116811461089857600080fd5b600080600080600080600060e0888a0312156114eb57600080fd5b6114f5898961145b565b96506060880135955060808801356001600160401b038082111561151857600080fd5b6115248b838c01611473565b909750955060a08a01359150611539826114bb565b90935060c0890135908082111561154f57600080fd5b5061155c8a828b01611473565b989b979a50959850939692959293505050565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b03811182821017156115a7576115a761156f565b60405290565b600082601f8301126115be57600080fd5b81356001600160401b03808211156115d8576115d861156f565b604051601f8301601f19908116603f011681019082821181831017156116005761160061156f565b8160405283815286602085880101111561161957600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060006080868803121561165157600080fd5b85356001600160401b038082111561166857600080fd5b818801915088601f83011261167c57600080fd5b81358181111561168b57600080fd5b8960208260051b85010111156116a057600080fd5b6020928301975095509087013590808211156116bb57600080fd5b6116c789838a016115ad565b945060408801359150808211156116dd57600080fd5b6116e989838a016115ad565b935060608801359150808211156116ff57600080fd5b5061170c888289016115ad565b9150509295509295909350565b803563ffffffff8116811461172d57600080fd5b919050565b6000806040838503121561174557600080fd5b61174e83611719565b946020939093013593505050565b6000806020838503121561176f57600080fd5b82356001600160401b038082111561178657600080fd5b818501915085601f83011261179a57600080fd5b8135818111156117a957600080fd5b8660206060830285010111156117be57600080fd5b60209290920196919550909350505050565b600080600080608085870312156117e657600080fd5b6117ef85611719565b935060208501356001600160401b038082111561180b57600080fd5b611817888389016115ad565b9450604087013591508082111561182d57600080fd5b611839888389016115ad565b9350606087013591508082111561184f57600080fd5b5061185c878288016115ad565b91505092959194509250565b60008060008060a0858703121561187e57600080fd5b611888868661145b565b935060608501356001600160401b038111156118a357600080fd5b6118af87828801611473565b90945092505060808501356118c3816114bb565b939692955090935050565b6000602082840312156118e057600080fd5b6112eb82611719565b6000602082840312156118fb57600080fd5b81356112eb816114bb565b60006060828403121561191857600080fd5b6112eb838361145b565b60005b8381101561193d578181015183820152602001611925565b50506000910152565b6000815180845261195e816020860160208601611922565b601f01601f19169290920160200192915050565b6060815260006119856060830186611946565b82810360208401526119978186611946565b905082810360408401526113858185611946565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115610976576109766119c1565b81810381811115610976576109766119c1565b600060608284031215611a0f57600080fd5b611a17611585565b611a2083611719565b815260208301356020820152604083013560408201528091505092915050565b6001600160401b038116811461089857600080fd5b600060208284031215611a6757600080fd5b81356112eb81611a40565b6001600160401b03818116838216019080821115611a9257611a926119c1565b5092915050565b600080600060608486031215611aae57600080fd5b83356001600160401b0380821115611ac557600080fd5b611ad1878388016115ad565b94506020860135915080821115611ae757600080fd5b611af3878388016115ad565b93506040860135915080821115611b0957600080fd5b50611b16868287016115ad565b9150509250925092565b6040815263ffffffff8351166040820152602083015160608201526000604084015160a06080840152611b5660e0840182611946565b90506060850151603f198483030160a0850152611b738282611946565b60809690960151151560c08501525050506001600160a01b039190911660209091015290565b600060408284031215611bab57600080fd5b604051604081018181106001600160401b0382111715611bcd57611bcd61156f565b604052825181526020928301519281019290925250919050565b600060408284031215611bf957600080fd5b6112eb8383611b99565b600060808284031215611c1557600080fd5b611c1d611585565b825181526020830151611c2f81611a40565b6020820152611c418460408501611b99565b60408201529392505050565b602080825282518282018190526000919060409081850190868401855b82811015611c9f578151805163ffffffff16855286810151878601528501518585015260609093019290850190600101611c6a565b5091979650505050505050565b8082028115828204841417610976576109766119c1565b600082611ce057634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611cf757600080fd5b81516112eb816114bb565b600060208284031215611d1457600080fd5b815180151581146112eb57600080fd5b60008251611d36818460208701611922565b919091019291505056fea2646970667358221220da0db46e6af5214cd63d178b6d997c5eee133bd5d67a360b7b66e64d1e8cf39064736f6c63430008160033",
  "deployedBytecode": "0x6080604052600436106101145760003560e01c8063715018a6116100a0578063bb0b6a5311610064578063bb0b6a531461037a578063c272198d146103b5578063ca5eb5e1146103ea578063f2fde38b1461040a578063ff7bd03d1461042a57600080fd5b8063715018a61461026c5780637d25a05e1461028157806382413eac146102b95780638da5cb5b146102f8578063ab99095d1461031657600080fd5b80633ccfd60b116100e75780633ccfd60b1461018857806346f943e91461019d5780635532d645146101bd5780635e280f11146101e5578063641b807a1461023157600080fd5b806313137d651461011957806317442b701461012e5780632f137df4146101555780633400288b14610168575b600080fd5b61012c6101273660046114d0565b61044a565b005b34801561013a57600080fd5b50604080516001815260026020820152015b60405180910390f35b61012c610163366004611639565b61050a565b34801561017457600080fd5b5061012c610183366004611732565b610840565b34801561019457600080fd5b5061012c610856565b3480156101a957600080fd5b5061012c6101b836600461175c565b61089b565b3480156101c957600080fd5b506101d2600181565b60405161ffff909116815260200161014c565b3480156101f157600080fd5b506102197f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161014c565b34801561023d57600080fd5b5061025161024c3660046117d0565b6108fe565b6040805182518152602092830151928101929092520161014c565b34801561027857600080fd5b5061012c61095f565b34801561028d57600080fd5b506102a161029c366004611732565b610973565b6040516001600160401b03909116815260200161014c565b3480156102c557600080fd5b506102e86102d4366004611868565b6001600160a01b0381163014949350505050565b604051901515815260200161014c565b34801561030457600080fd5b506000546001600160a01b0316610219565b34801561032257600080fd5b5061035a6103313660046118ce565b600260208190526000918252604090912080546001820154928201546003909201549092919084565b60408051948552602085019390935291830152606082015260800161014c565b34801561038657600080fd5b506103a76103953660046118ce565b60016020526000908152604090205481565b60405190815260200161014c565b3480156103c157600080fd5b506103d56103d03660046118ce565b61097c565b6040805192835260208301919091520161014c565b3480156103f657600080fd5b5061012c6104053660046118e9565b6109dc565b34801561041657600080fd5b5061012c6104253660046118e9565b610a62565b34801561043657600080fd5b506102e8610445366004611906565b610a9d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316331461049a576040516391ac5e4f60e01b81523360048201526024015b60405180910390fd5b602087018035906104b4906104af908a6118ce565b610ad3565b146104f2576104c660208801886118ce565b60405163309afaf360e21b815263ffffffff909116600482015260208801356024820152604401610491565b61050187878787878787610b0f565b50505050505050565b60045460ff161561054e5760405162461bcd60e51b815260206004820152600e60248201526d1499595b9d1c985b9d0818d85b1b60921b6044820152606401610491565b6004805460ff1916600117905582516105a25760405162461bcd60e51b815260206004820152601660248201527553656e6465722063616e6e6f7420626520656d70747960501b6044820152606401610491565b60008251116105ea5760405162461bcd60e51b8152602060048201526014602482015273446174612063616e6e6f7420626520656d70747960601b6044820152606401610491565b60008151116106315760405162461bcd60e51b81526020600482015260136024820152724b65792063616e6e6f7420626520656d70747960681b6044820152606401610491565b600083838360405160200161064893929190611972565b60405160208183030381529060405290506000805b868110156107a95761069688888381811061067a5761067a6119ab565b905060200201602081019061068f91906118ce565b6001610c69565b604080516020810190915260008082526106d98a8a858181106106bb576106bb6119ab565b90506020020160208101906106d091906118ce565b86846000610cde565b80519091506106e890856119d7565b93506107368a8a858181106106ff576106ff6119ab565b905060200201602081019061071491906118ce565b8684604051806040016040528086600001518152602001600081525033610dbf565b50898984818110610749576107496119ab565b905060200201602081019061075e91906118ce565b63ffffffff167fc7038e6fe58091dcb1c0df6cb33f9e52f657b70ca86f51bdc4a4f1669d63b18f89898960405161079793929190611972565b60405180910390a2505060010161065d565b50803410156107ed5760405162461bcd60e51b815260206004820152601060248201526f496e73756666696369656e742066656560801b6044820152606401610491565b8034111561082d57336108fc61080383346119ea565b6040518115909202916000818181858888f1935050505015801561082b573d6000803e3d6000fd5b505b50506004805460ff191690555050505050565b610848610ebf565b6108528282610eec565b5050565b61085e610ebf565b600080546040516001600160a01b03909116914780156108fc02929091818181858888f19350505050158015610898573d6000803e3d6000fd5b50565b6108a3610ebf565b6108528282808060200260200160405190810160405280939291908181526020016000905b828210156108f4576108e5606083028601368190038101906119fd565b815260200190600101906108c8565b5050505050610f41565b6040805180820190915260008082526020820152600084848460405160200161092993929190611972565b60408051601f1981840301815260208301909152600080835290925061095490889084908490610cde565b979650505050505050565b610967610ebf565b6109716000611045565b565b60005b92915050565b63ffffffff811660009081526002602081815260408084208151608081018352815480825260018301549482018590529482015492810183905260039091015460608201819052859491936109d2939091611095565b9250925050915091565b6109e4610ebf565b60405163ca5eb5e160e01b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063ca5eb5e190602401600060405180830381600087803b158015610a4757600080fd5b505af1158015610a5b573d6000803e3d6000fd5b5050505050565b610a6a610ebf565b6001600160a01b038116610a9457604051631e4fbdf760e01b815260006004820152602401610491565b61089881611045565b6000602082018035906001908390610ab590866118ce565b63ffffffff1681526020810191909152604001600020541492915050565b63ffffffff8116600090815260016020526040812054806109765760405163f6ff4fb760e01b815263ffffffff84166004820152602401610491565b6000610b216060890160408a01611a55565b905060036000610b3460208b018b6118ce565b63ffffffff168152602081019190915260400160002054610b5f906001600160401b03166001611a72565b6001600160401b0316816001600160401b031614610baf5760405162461bcd60e51b815260206004820152600d60248201526c496e76616c6964206e6f6e636560981b6044820152606401610491565b8060036000610bc160208c018c6118ce565b63ffffffff16815260208101919091526040016000908120805467ffffffffffffffff19166001600160401b0393909316929092179091558080610c078989018a611a99565b91945092509050610c1b60208c018c6118ce565b63ffffffff167f9507536125af879f7b5c57b2e38d28b900fe1676221d6b6a934ae5c4d920c0d3848484604051610c5493929190611972565b60405180910390a25050505050505050505050565b63ffffffff821660009081526002602081905260408220805460018201549282015460038301549294938493610ca0939290611095565b9150915080841115610cc55760405163a74c1c5f60e01b815260040160405180910390fd5b610ccf84836119d7565b83555050426001909101555050565b60408051808201909152600080825260208201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ddc28c586040518060a001604052808863ffffffff168152602001610d4189610ad3565b8152602001878152602001868152602001851515815250306040518363ffffffff1660e01b8152600401610d76929190611b20565b6040805180830381865afa158015610d92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db69190611be7565b95945050505050565b610dc7611414565b6000610dd68460000151611115565b602085015190915015610df057610df0846020015161113d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632637a450826040518060a001604052808b63ffffffff168152602001610e408c610ad3565b81526020018a815260200189815260200160008960200151111515815250866040518463ffffffff1660e01b8152600401610e7c929190611b20565b60806040518083038185885af1158015610e9a573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906109549190611c03565b6000546001600160a01b031633146109715760405163118cdaa760e01b8152336004820152602401610491565b63ffffffff8216600081815260016020908152604091829020849055815192835282018390527f238399d427b947898edb290f5ff0f9109849b1c3ba196a42e35f00c50a54b98b910160405180910390a15050565b60005b815181101561100a57600060026000848481518110610f6557610f656119ab565b60200260200101516000015163ffffffff1663ffffffff1681526020019081526020016000209050610fb5838381518110610fa257610fa26119ab565b6020026020010151600001516000610c69565b828281518110610fc757610fc76119ab565b6020026020010151602001518160020181905550828281518110610fed57610fed6119ab565b602090810291909101015160400151600390910155600101610f44565b507fe888347665897e637801f36c5129f510657276178c89022bc5fa0246dbc19de18160405161103a9190611c4d565b60405180910390a150565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080806110a386426119ea565b90508381106110b8576000925084915061110b565b6000846110c58388611cac565b6110cf9190611cc3565b9050808811156110e8576110e381896119ea565b6110eb565b60005b935083861115611104576110ff84876119ea565b611107565b60005b9250505b5094509492505050565b6000813414611139576040516304fb820960e51b8152346004820152602401610491565b5090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e4fe1d946040518163ffffffff1660e01b8152600401602060405180830381865afa15801561119d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c19190611ce5565b90506001600160a01b0381166111ea576040516329b99a9560e11b815260040160405180910390fd5b6040805133602482018190527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03818116604485015260648085018890528551808603909101815260849094019094526020830180516001600160e01b03166323b872dd60e01b17905261085293851692869061126f908590611275565b50505050565b600061128a6001600160a01b038416836112dd565b905080516000141580156112af5750808060200190518101906112ad9190611d02565b155b156112d857604051635274afe760e01b81526001600160a01b0384166004820152602401610491565b505050565b60606112eb838360006112f2565b9392505050565b6060814710156113175760405163cd78605960e01b8152306004820152602401610491565b600080856001600160a01b031684866040516113339190611d24565b60006040518083038185875af1925050503d8060008114611370576040519150601f19603f3d011682016040523d82523d6000602084013e611375565b606091505b509150915061138586838361138f565b9695505050505050565b6060826113a45761139f826113eb565b6112eb565b81511580156113bb57506001600160a01b0384163b155b156113e457604051639996b31560e01b81526001600160a01b0385166004820152602401610491565b50806112eb565b8051156113fb5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60405180606001604052806000801916815260200160006001600160401b03168152602001611456604051806040016040528060008152602001600081525090565b905290565b60006060828403121561146d57600080fd5b50919050565b60008083601f84011261148557600080fd5b5081356001600160401b0381111561149c57600080fd5b6020830191508360208285010111156114b457600080fd5b9250929050565b6001600160a01b038116811461089857600080fd5b600080600080600080600060e0888a0312156114eb57600080fd5b6114f5898961145b565b96506060880135955060808801356001600160401b038082111561151857600080fd5b6115248b838c01611473565b909750955060a08a01359150611539826114bb565b90935060c0890135908082111561154f57600080fd5b5061155c8a828b01611473565b989b979a50959850939692959293505050565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b03811182821017156115a7576115a761156f565b60405290565b600082601f8301126115be57600080fd5b81356001600160401b03808211156115d8576115d861156f565b604051601f8301601f19908116603f011681019082821181831017156116005761160061156f565b8160405283815286602085880101111561161957600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060006080868803121561165157600080fd5b85356001600160401b038082111561166857600080fd5b818801915088601f83011261167c57600080fd5b81358181111561168b57600080fd5b8960208260051b85010111156116a057600080fd5b6020928301975095509087013590808211156116bb57600080fd5b6116c789838a016115ad565b945060408801359150808211156116dd57600080fd5b6116e989838a016115ad565b935060608801359150808211156116ff57600080fd5b5061170c888289016115ad565b9150509295509295909350565b803563ffffffff8116811461172d57600080fd5b919050565b6000806040838503121561174557600080fd5b61174e83611719565b946020939093013593505050565b6000806020838503121561176f57600080fd5b82356001600160401b038082111561178657600080fd5b818501915085601f83011261179a57600080fd5b8135818111156117a957600080fd5b8660206060830285010111156117be57600080fd5b60209290920196919550909350505050565b600080600080608085870312156117e657600080fd5b6117ef85611719565b935060208501356001600160401b038082111561180b57600080fd5b611817888389016115ad565b9450604087013591508082111561182d57600080fd5b611839888389016115ad565b9350606087013591508082111561184f57600080fd5b5061185c878288016115ad565b91505092959194509250565b60008060008060a0858703121561187e57600080fd5b611888868661145b565b935060608501356001600160401b038111156118a357600080fd5b6118af87828801611473565b90945092505060808501356118c3816114bb565b939692955090935050565b6000602082840312156118e057600080fd5b6112eb82611719565b6000602082840312156118fb57600080fd5b81356112eb816114bb565b60006060828403121561191857600080fd5b6112eb838361145b565b60005b8381101561193d578181015183820152602001611925565b50506000910152565b6000815180845261195e816020860160208601611922565b601f01601f19169290920160200192915050565b6060815260006119856060830186611946565b82810360208401526119978186611946565b905082810360408401526113858185611946565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115610976576109766119c1565b81810381811115610976576109766119c1565b600060608284031215611a0f57600080fd5b611a17611585565b611a2083611719565b815260208301356020820152604083013560408201528091505092915050565b6001600160401b038116811461089857600080fd5b600060208284031215611a6757600080fd5b81356112eb81611a40565b6001600160401b03818116838216019080821115611a9257611a926119c1565b5092915050565b600080600060608486031215611aae57600080fd5b83356001600160401b0380821115611ac557600080fd5b611ad1878388016115ad565b94506020860135915080821115611ae757600080fd5b611af3878388016115ad565b93506040860135915080821115611b0957600080fd5b50611b16868287016115ad565b9150509250925092565b6040815263ffffffff8351166040820152602083015160608201526000604084015160a06080840152611b5660e0840182611946565b90506060850151603f198483030160a0850152611b738282611946565b60809690960151151560c08501525050506001600160a01b039190911660209091015290565b600060408284031215611bab57600080fd5b604051604081018181106001600160401b0382111715611bcd57611bcd61156f565b604052825181526020928301519281019290925250919050565b600060408284031215611bf957600080fd5b6112eb8383611b99565b600060808284031215611c1557600080fd5b611c1d611585565b825181526020830151611c2f81611a40565b6020820152611c418460408501611b99565b60408201529392505050565b602080825282518282018190526000919060409081850190868401855b82811015611c9f578151805163ffffffff16855286810151878601528501518585015260609093019290850190600101611c6a565b5091979650505050505050565b8082028115828204841417610976576109766119c1565b600082611ce057634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611cf757600080fd5b81516112eb816114bb565b600060208284031215611d1457600080fd5b815180151581146112eb57600080fd5b60008251611d36818460208701611922565b919091019291505056fea2646970667358221220da0db46e6af5214cd63d178b6d997c5eee133bd5d67a360b7b66e64d1e8cf39064736f6c63430008160033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "events": {
      "RateLimitsChanged((uint32,uint256,uint256)[])": {
        "params": {
          "rateLimitConfigs": "An array of `RateLimitConfig` structs representing the rate limit configurations set. - `dstEid`: The destination endpoint id. - `limit`: This represents the maximum allowed amount within a given window. - `window`: Defines the duration of the rate limiting window."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "allowInitializePath((uint32,bytes32,uint64))": {
        "details": "This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.This defaults to assuming if a peer has been set, its initialized. Can be overridden by the OApp if there is other logic to determine this.",
        "params": {
          "origin": "The origin information containing the source endpoint and sender address."
        },
        "returns": {
          "_0": "Whether the path has been initialized."
        }
      },
      "getAmountCanBeSent(uint32)": {
        "params": {
          "_dstEid": "The destination endpoint id."
        },
        "returns": {
          "amountCanBeSent": "The amount that can be sent.",
          "currentAmountInFlight": "The current amount that was sent."
        }
      },
      "isComposeMsgSender((uint32,bytes32,uint64),bytes,address)": {
        "details": "_origin The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message._message The lzReceive payload.Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.The default sender IS the OAppReceiver implementer.",
        "params": {
          "_sender": "The sender address."
        },
        "returns": {
          "_0": "isSender Is a valid sender."
        }
      },
      "lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)": {
        "details": "Entry point for receiving messages or packets from the endpoint.Entry point for receiving msg/packet from the LayerZero endpoint.",
        "params": {
          "_executor": "The address of the executor for the received message.",
          "_extraData": "Additional arbitrary data provided by the corresponding executor.",
          "_guid": "The unique identifier for the received LayerZero message.",
          "_message": "The payload of the received message.",
          "_origin": "The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message."
        }
      },
      "nextNonce(uint32,bytes32)": {
        "details": "_srcEid The source endpoint ID._sender The sender address.The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.Is required by the off-chain executor to determine the OApp expects msg execution is ordered.This is also enforced by the OApp.By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.",
        "returns": {
          "nonce": "The next nonce."
        }
      },
      "oAppVersion()": {
        "returns": {
          "receiverVersion": "The version of the OAppReceiver.sol implementation.",
          "senderVersion": "The version of the OAppSender.sol implementation."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setDelegate(address)": {
        "details": "Only the owner/admin of the OApp can call this function.Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.",
        "params": {
          "_delegate": "The address of the delegate to be set."
        }
      },
      "setPeer(uint32,bytes32)": {
        "details": "Only the owner/admin of the OApp can call this function.Indicates that the peer is trusted to send LayerZero messages to this OApp.Set this to bytes32(0) to remove the peer address.Peer is a bytes32 to accommodate non-evm chains.",
        "params": {
          "_eid": "The endpoint ID.",
          "_peer": "The address of the peer to be associated with the corresponding endpoint."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "RateLimitExceeded()": [
        {
          "notice": "Error that is thrown when an amount exceeds the rate_limit."
        }
      ]
    },
    "events": {
      "RateLimitsChanged((uint32,uint256,uint256)[])": {
        "notice": "Emitted when _setRateLimits occurs."
      }
    },
    "kind": "user",
    "methods": {
      "allowInitializePath((uint32,bytes32,uint64))": {
        "notice": "Checks if the path initialization is allowed based on the provided origin."
      },
      "endpoint()": {
        "notice": "Retrieves the LayerZero endpoint associated with the OApp."
      },
      "getAmountCanBeSent(uint32)": {
        "notice": "Get the current amount that can be sent to this destination endpoint id for the given rate limit window."
      },
      "isComposeMsgSender((uint32,bytes32,uint64),bytes,address)": {
        "notice": "Indicates whether an address is an approved composeMsg sender to the Endpoint."
      },
      "nextNonce(uint32,bytes32)": {
        "notice": "Retrieves the next nonce for a given source endpoint and sender address."
      },
      "oAppVersion()": {
        "notice": "Retrieves the OApp version information."
      },
      "peers(uint32)": {
        "notice": "Retrieves the peer (OApp) associated with a corresponding endpoint."
      },
      "setDelegate(address)": {
        "notice": "Sets the delegate address for the OApp."
      },
      "setPeer(uint32,bytes32)": {
        "notice": "Sets the peer address (OApp instance) for a corresponding endpoint."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1579,
        "contract": "contracts/MultiChainMessenger.sol:MultiChainMessenger",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 785,
        "contract": "contracts/MultiChainMessenger.sol:MultiChainMessenger",
        "label": "peers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint32,t_bytes32)"
      },
      {
        "astId": 1345,
        "contract": "contracts/MultiChainMessenger.sol:MultiChainMessenger",
        "label": "rateLimits",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint32,t_struct(RateLimit)1331_storage)"
      },
      {
        "astId": 2439,
        "contract": "contracts/MultiChainMessenger.sol:MultiChainMessenger",
        "label": "receivedNonces",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint32,t_uint64)"
      },
      {
        "astId": 2444,
        "contract": "contracts/MultiChainMessenger.sol:MultiChainMessenger",
        "label": "_locked",
        "offset": 0,
        "slot": "4",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint32,t_struct(RateLimit)1331_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct RateLimiter.RateLimit)",
        "numberOfBytes": "32",
        "value": "t_struct(RateLimit)1331_storage"
      },
      "t_mapping(t_uint32,t_uint64)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_struct(RateLimit)1331_storage": {
        "encoding": "inplace",
        "label": "struct RateLimiter.RateLimit",
        "members": [
          {
            "astId": 1324,
            "contract": "contracts/MultiChainMessenger.sol:MultiChainMessenger",
            "label": "amountInFlight",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1326,
            "contract": "contracts/MultiChainMessenger.sol:MultiChainMessenger",
            "label": "lastUpdated",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1328,
            "contract": "contracts/MultiChainMessenger.sol:MultiChainMessenger",
            "label": "limit",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1330,
            "contract": "contracts/MultiChainMessenger.sol:MultiChainMessenger",
            "label": "window",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}